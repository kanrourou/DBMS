!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AttrLength	rbfm.h	/^typedef unsigned AttrLength;$/;"	t
AttrType	rbfm.h	/^typedef enum { TypeInt = 0, TypeReal, TypeVarChar } AttrType;$/;"	t	typeref:enum:__anon2
Attribute	rbfm.h	/^struct Attribute {$/;"	s
CompOp	rbfm.h	/^} CompOp;$/;"	t	typeref:enum:__anon3
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
EQ_OP	rbfm.h	/^typedef enum { EQ_OP = 0,  \/\/ =$/;"	e	enum:__anon3
FIELD_INFO_SIZE	rbfm.h	/^#define FIELD_INFO_SIZE /;"	d
FREE_SPACE_DIR_SIZE	rbfm.h	/^#define FREE_SPACE_DIR_SIZE /;"	d
FileHandle	pfm.cc	/^FileHandle::FileHandle()$/;"	f	class:FileHandle
FileHandle	pfm.h	/^class FileHandle$/;"	c
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile(filename):$/;"	f
GE_OP	rbfm.h	/^	GE_OP,      \/\/ >=$/;"	e	enum:__anon3
GT_OP	rbfm.h	/^	GT_OP,      \/\/ >$/;"	e	enum:__anon3
LE_OP	rbfm.h	/^	LE_OP,      \/\/ <=$/;"	e	enum:__anon3
LT_OP	rbfm.h	/^	LT_OP,      \/\/ <$/;"	e	enum:__anon3
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute(flags, working_directory):$/;"	f
NE_OP	rbfm.h	/^	NE_OP,      \/\/ !=$/;"	e	enum:__anon3
NO_OP	rbfm.h	/^	NO_OP       \/\/ no condition$/;"	e	enum:__anon3
PAGE_SIZE	pfm.h	/^#define PAGE_SIZE /;"	d
PageNum	pfm.h	/^typedef unsigned PageNum;$/;"	t
PagedFileManager	pfm.cc	/^PagedFileManager::PagedFileManager()$/;"	f	class:PagedFileManager
PagedFileManager	pfm.h	/^class PagedFileManager$/;"	c
PrepareClangFlags	.ycm_extra_conf.py	/^from clang_helpers import PrepareClangFlags$/;"	i
RBFM_EOF	rbfm.h	/^# define RBFM_EOF /;"	d
RBFM_ScanIterator	rbfm.h	/^	RBFM_ScanIterator() {};$/;"	f	class:RBFM_ScanIterator
RBFM_ScanIterator	rbfm.h	/^class RBFM_ScanIterator {$/;"	c
RC	pfm.h	/^typedef int RC;$/;"	t
RID	rbfm.h	/^} RID;$/;"	t	typeref:struct:__anon1
RecordBasedFileManager	rbfm.cc	/^RecordBasedFileManager::RecordBasedFileManager()$/;"	f	class:RecordBasedFileManager
RecordBasedFileManager	rbfm.h	/^class RecordBasedFileManager$/;"	c
SLOT_SIZE	rbfm.h	/^#define SLOT_SIZE /;"	d
TypeInt	rbfm.h	/^typedef enum { TypeInt = 0, TypeReal, TypeVarChar } AttrType;$/;"	e	enum:__anon2
TypeReal	rbfm.h	/^typedef enum { TypeInt = 0, TypeReal, TypeVarChar } AttrType;$/;"	e	enum:__anon2
TypeVarChar	rbfm.h	/^typedef enum { TypeInt = 0, TypeReal, TypeVarChar } AttrType;$/;"	e	enum:__anon2
_pf_manager	pfm.cc	/^PagedFileManager* PagedFileManager::_pf_manager = 0;$/;"	m	class:PagedFileManager	file:
_pf_manager	pfm.h	/^    static PagedFileManager *_pf_manager;$/;"	m	class:PagedFileManager
_pfm_h_	pfm.h	/^#define _pfm_h_$/;"	d
_rbf_manager	rbfm.cc	/^RecordBasedFileManager* RecordBasedFileManager::_rbf_manager = 0;$/;"	m	class:RecordBasedFileManager	file:
_rbf_manager	rbfm.h	/^	static RecordBasedFileManager *_rbf_manager;$/;"	m	class:RecordBasedFileManager
_rbfm_h_	rbfm.h	/^#define _rbfm_h_$/;"	d
appendPage	pfm.cc	/^RC FileHandle::appendPage(const void *data)$/;"	f	class:FileHandle
close	rbfm.h	/^	RC close() { return -1; };$/;"	f	class:RBFM_ScanIterator
closeFile	pfm.cc	/^RC PagedFileManager::closeFile(FileHandle &fileHandle)$/;"	f	class:PagedFileManager
closeFile	rbfm.cc	/^RC RecordBasedFileManager::closeFile(FileHandle &fileHandle) {$/;"	f	class:RecordBasedFileManager
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
createFile	pfm.cc	/^RC PagedFileManager::createFile(const char *fileName)$/;"	f	class:PagedFileManager
createFile	rbfm.cc	/^RC RecordBasedFileManager::createFile(const string &fileName) {$/;"	f	class:RecordBasedFileManager
database	.ycm_extra_conf.py	/^    database = None$/;"	v
database	.ycm_extra_conf.py	/^    database = ycm_core.CompilationDatabase(compilation_database_folder)$/;"	v
deleteRecord	rbfm.cc	/^RC RecordBasedFileManager::deleteRecord(FileHandle &fileHandle, const vector<Attribute> &recordDescriptor, const RID &rid)$/;"	f	class:RecordBasedFileManager
deleteRecordHelper	rbfm.cc	/^RC  RecordBasedFileManager::deleteRecordHelper(FileHandle &fileHandle, const RID &rid, RID &realRid)$/;"	f	class:RecordBasedFileManager
deleteRecords	rbfm.cc	/^RC RecordBasedFileManager::deleteRecords(FileHandle &fileHandle)$/;"	f	class:RecordBasedFileManager
destroyFile	pfm.cc	/^RC PagedFileManager::destroyFile(const char *fileName)$/;"	f	class:PagedFileManager
destroyFile	rbfm.cc	/^RC RecordBasedFileManager::destroyFile(const string &fileName) {$/;"	f	class:RecordBasedFileManager
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
freeMemory	rbfm.cc	/^RC RecordBasedFileManager::freeMemory(char* page_dummy) {$/;"	f	class:RecordBasedFileManager
getAvailableSlotOffset	rbfm.h	/^	inline int getAvailableSlotOffset(void* page)$/;"	f	class:RecordBasedFileManager
getFile	pfm.cc	/^FILE* FileHandle::getFile()$/;"	f	class:FileHandle
getFreeSpace	rbfm.h	/^	inline int getFreeSpace(void* page)$/;"	f	class:RecordBasedFileManager
getFreeSpaceOffset	rbfm.h	/^	inline int getFreeSpaceOffset(void* page)$/;"	f	class:RecordBasedFileManager
getNextRecord	rbfm.h	/^	RC getNextRecord(RID &rid, void *data) { return RBFM_EOF; };$/;"	f	class:RBFM_ScanIterator
getNumOfSlots	rbfm.h	/^	inline int getNumOfSlots(void* page)$/;"	f	class:RecordBasedFileManager
getNumberOfPages	pfm.cc	/^int FileHandle::getNumberOfPages()$/;"	f	class:FileHandle
getPage	rbfm.cc	/^int RecordBasedFileManager::getPage(FileHandle &fileHandle, void *page, bool& isNew, int recordSize, int& freePageNum) $/;"	f	class:RecordBasedFileManager
getRealRecord	rbfm.cc	/^RC RecordBasedFileManager::getRealRecord(const RID &rid, char* page_dummy, char* data)$/;"	f	class:RecordBasedFileManager
getRealRecordRid	rbfm.cc	/^RC RecordBasedFileManager::getRealRecordRid(FileHandle &fileHandle, const RID &rid, RID &realRid, char* data) {$/;"	f	class:RecordBasedFileManager
getSlot	rbfm.h	/^	inline void getSlot(int& recordOffset, int& recordLen, int slotNum, void* page)$/;"	f	class:RecordBasedFileManager
getSlotOffset	rbfm.h	/^	inline int getSlotOffset(int slotNum)\/\/slot num starts from 0$/;"	f	class:RecordBasedFileManager
initializePage	rbfm.h	/^	inline void initializePage(void* page)   \/\/page must be initialized before insertion$/;"	f	class:RecordBasedFileManager
insertRecord	rbfm.cc	/^RC RecordBasedFileManager::insertRecord(FileHandle &fileHandle, const vector<Attribute> &recordDescriptor, const void *data, RID &rid) {$/;"	f	class:RecordBasedFileManager
instance	pfm.cc	/^PagedFileManager* PagedFileManager::instance()$/;"	f	class:PagedFileManager
instance	rbfm.cc	/^RecordBasedFileManager* RecordBasedFileManager::instance()$/;"	f	class:RecordBasedFileManager
length	rbfm.h	/^	AttrLength length; \/\/ attribute length$/;"	m	struct:Attribute
lookForPageInDir	rbfm.cc	/^int RecordBasedFileManager::lookForPageInDir(FileHandle &fileHandle, int recordSize)$/;"	f	class:RecordBasedFileManager
main	rbftest.cc	/^int main() $/;"	f
name	rbfm.h	/^	string   name;     \/\/ attribute name$/;"	m	struct:Attribute
numOfPages	pfm.h	/^    int numOfPages;											\/\/ number of pages$/;"	m	class:FileHandle
openFile	pfm.cc	/^RC PagedFileManager::openFile(const char *fileName, FileHandle &fileHandle)$/;"	f	class:PagedFileManager
openFile	rbfm.cc	/^RC RecordBasedFileManager::openFile(const string &fileName, FileHandle &fileHandle) {$/;"	f	class:RecordBasedFileManager
os	.ycm_extra_conf.py	/^import os$/;"	i
pFile_	pfm.h	/^    FILE* pFile_;														\/\/ Associated file$/;"	m	class:FileHandle
pageNum	rbfm.h	/^	unsigned pageNum;$/;"	m	struct:__anon1
pfm	rbfm.h	/^	PagedFileManager* pfm;$/;"	m	class:RecordBasedFileManager
prepareRecord	rbfm.cc	/^void RecordBasedFileManager::prepareRecord(const vector<Attribute> &recordDescriptor, void* appendedData, const void* data)$/;"	f	class:RecordBasedFileManager
printRecord	rbfm.cc	/^RC RecordBasedFileManager::printRecord(const vector<Attribute> &recordDescriptor, const void *data) {$/;"	f	class:RecordBasedFileManager
rbfTest	rbftest.cc	/^void rbfTest()$/;"	f
readPage	pfm.cc	/^RC FileHandle::readPage(PageNum pageNum, void *data)$/;"	f	class:FileHandle
readRecord	rbfm.cc	/^RC RecordBasedFileManager::readRecord(FileHandle &fileHandle, const vector<Attribute> &recordDescriptor, const RID &rid, void *data) {$/;"	f	class:RecordBasedFileManager
setFile	pfm.cc	/^void FileHandle::setFile(FILE* const pFile)$/;"	f	class:FileHandle
setPageNum	pfm.cc	/^void FileHandle::setPageNum(int num)$/;"	f	class:FileHandle
slotNum	rbfm.h	/^	unsigned slotNum;$/;"	m	struct:__anon1
type	rbfm.h	/^	AttrType type;     \/\/ attribute type$/;"	m	struct:Attribute
updateFreeSpaceOffset	rbfm.h	/^	inline void updateFreeSpaceOffset(void* page, int offset)$/;"	f	class:RecordBasedFileManager
updateNumOfSlots	rbfm.h	/^	inline void updateNumOfSlots(void* page, int num)$/;"	f	class:RecordBasedFileManager
writePage	pfm.cc	/^RC FileHandle::writePage(PageNum pageNum, const void *data)$/;"	f	class:FileHandle
ycm_core	.ycm_extra_conf.py	/^import ycm_core$/;"	i
~FileHandle	pfm.cc	/^FileHandle::~FileHandle()$/;"	f	class:FileHandle
~PagedFileManager	pfm.cc	/^PagedFileManager::~PagedFileManager()$/;"	f	class:PagedFileManager
~RBFM_ScanIterator	rbfm.h	/^	~RBFM_ScanIterator() {};$/;"	f	class:RBFM_ScanIterator
~RecordBasedFileManager	rbfm.cc	/^RecordBasedFileManager::~RecordBasedFileManager()$/;"	f	class:RecordBasedFileManager
